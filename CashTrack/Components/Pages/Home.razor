@page "/home"
@using CashTrack.DataModel.Model
@using CashTrack.DataAccess.Services.Interface
@inject NavigationManager Navigation

<h1>Transactions</h1>

<h3>Balance: @balance</h3>

<div class="row">
    <!-- Recent Transactions (Credit and Debit) -->
    <div class="col-md-4">
        <h3>Recent Transactions</h3>
        @if (recentTransactions.Any())
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in recentTransactions)
                    {
                        <tr class="@GetTransactionClass(transaction)">
                            <td>@transaction.title</td>
                            <td>@transaction.date.ToShortDateString()</td>
                            <td>@transaction.amount</td>
                            <td>@transaction.notes</td>
                        </tr>
                    }
                </tbody>
            </table>
            <button class="btn btn-primary" @onclick="NavigateToCreditDebit">View All</button>
        }
        else
        {
            <p>No recent transactions available.</p>
        }
    </div>

    <!-- Pending Debts -->
    <div class="col-md-4">
        <h3>Pending Debts</h3>
        @if (debtTransactions.Any())
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Date</th>
                        <th>Amount</th>
                        <th>Due Date</th>
                        <th>Notes</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var transaction in debtTransactions)
                    {
                        <tr class="table-warning">
                            <td>@transaction.title</td>
                            <td>@transaction.date.ToShortDateString()</td>
                            <td>@transaction.amount</td>
                            <td>@transaction.duedate?.ToShortDateString()</td>
                            <td>@transaction.notes</td>
                        </tr>
                    }
                </tbody>
            </table>
            <button class="btn btn-primary" @onclick="NavigateToDebtPage">View All</button>
        }
        else
        {
            <p>No pending debts available.</p>
        }
    </div>

    <!-- Paid Debts -->
    <div class="col-md-4">
        <h3>Paid Debts</h3>
        @if (paidDebts.Any())
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Due Date</th>
                        <th>Amount</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in paidDebts)
                    {
                        <tr>
                            <td>@debt.title</td>
                            <td>@debt.duedate?.ToString("yyyy-MM-dd")</td>
                            <td>@debt.amount</td>
                            <td>@debt.status</td>
                            <td>
                                <button class="btn btn-danger" @onclick="() => RemovePaidDebt(debt.transactionId)">Remove</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No paid debts available.</p>
        }
    </div>
</div>

@code {
    private List<Transaction> recentTransactions = new List<Transaction>(); // Combined credit and debit transactions
    private List<Transaction> debtTransactions = new List<Transaction>();
    private List<Transaction> paidDebts = new List<Transaction>(); // Paid debts
    private double balance;

    [Inject] public ITransactionService transactionService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var result = await FilterTransactionsForLastMonth();
        recentTransactions = result.RecentTransactions;
        debtTransactions = result.DebtTransactions;
        balance = result.Balance;

        // Load paid debts
        var allTransactions = await transactionService.GetAllTransactions();
        paidDebts = allTransactions.Where(t => t.transactionType == TransactionType.debt && t.status == "Paid").ToList();
    }

    public async Task<(List<Transaction> RecentTransactions, List<Transaction> DebtTransactions, double Balance)> FilterTransactionsForLastMonth()
    {
        var oneMonthAgo = DateTime.Now.AddMonths(-1); // Calculate date for 1 month ago
        var allTransactions = await transactionService.GetAllTransactions();

        // Filter credit and debit transactions for the last month
        var recentTransactions = allTransactions
            .Where(t => (t.transactionType == TransactionType.credit || t.transactionType == TransactionType.debit) &&
                        t.date >= oneMonthAgo &&
                        !(t.title?.StartsWith("Debt Payment:") ?? false)) // Safely handle null titles
            .OrderByDescending(t => t.date) // Sort by the most recent date
            .ToList();

        // Filter debt transactions for the last month and "unpaid" status
        var debtTransactions = allTransactions
            .Where(t => t.transactionType == TransactionType.debt &&
                        t.status == "unpaid" &&
                        t.date >= oneMonthAgo) // Filter for the last month
            .ToList();

        // Get the current balance
        var balance = await transactionService.GetBalance();

        // Return all results as a tuple
        return (recentTransactions, debtTransactions, balance);
    }

    // Method to get the class for styling based on transaction type (credit = green, debit = red)
    private string GetTransactionClass(Transaction transaction)
    {
        return transaction.transactionType switch
        {
            TransactionType.credit => "table-success", // Green for Credit
            TransactionType.debit => "table-danger",   // Red for Debit
            _ => ""
        };
    }

    // Method to navigate to the Credit-Debit page
    private void NavigateToCreditDebit()
    {
        Navigation.NavigateTo("/credit-debit");
    }

    // Method to navigate to the Debts page
    private void NavigateToDebtPage()
    {
        Navigation.NavigateTo("/debt");
    }

    private async Task RemovePaidDebt(Guid transactionId)
    {
        var success = await transactionService.DeleteTransaction(transactionId);

        if (success)
        {
            // Refresh the list after removing a debt
            var allTransactions = await transactionService.GetAllTransactions();
            paidDebts = allTransactions.Where(t => t.transactionType == TransactionType.debt && t.status == "Paid").ToList();
        }
        else
        {
            // Handle failure (e.g., transaction not found)
            Console.WriteLine("Failed to remove paid debt.");
        }
    }
}
