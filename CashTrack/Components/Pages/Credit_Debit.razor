@page "/credit-debit"
@using CashTrack.DataModel.Model
@using CashTrack.DataAccess.Services.Interface
@using System.Globalization

<link href="css/homeStyle.css" rel="stylesheet" />

<h1>Recent Transactions</h1>

<h3>Balance: @balance</h3>

<div class="row">
    <div class="col-md-6">
        <!-- Search and Date Filters -->
        <input type="text" class="form-control mb-3" placeholder="Search by Title" @bind="searchQuery" />

        <input type="date" class="form-control mb-3" @bind="startDate" />

        <input type="date" class="form-control mb-3" @bind="endDate" />

        <!-- Tag Dropdown -->
        <select class="form-control mb-3" @bind="selectedTag">
            <option value="">All Tags</option>
            @foreach (var tag in availableTags)
            {
                <option value="@tag">@tag</option>
            }
        </select>

        <!-- Search Button -->
        <button class="btn btn-primary mt-3" @onclick="OnSearchClick">Search</button>
    </div>
</div>

<div class="table-responsive">
    @if (filteredTransactions.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Notes</th>
                    <th>Tags</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in filteredTransactions)
                {
                    <tr class="@GetTransactionClass(transaction)">
                        <td>@transaction.title</td>
                        <td>@transaction.date.ToShortDateString()</td>
                        <td>@transaction.amount</td>
                        <td>@transaction.notes</td>
                        <td>@string.Join(", ", transaction.tags ?? new List<string>())</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteTransaction(transaction.transactionId)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No transactions found based on the applied filters.</p>
    }
</div>

@code {
    private List<Transaction> allTransactions = new List<Transaction>();
    private List<Transaction> filteredTransactions = new List<Transaction>();
    private List<string> availableTags = new List<string>();
    private double balance = 0.0;
    private string searchQuery = string.Empty;
    private DateTime? startDate;
    private DateTime? endDate;
    private string selectedTag = string.Empty;

    [Inject] public ITransactionService transactionService { get; set; }
    [Inject] public ITagService tagService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        allTransactions = await transactionService.GetAllTransactions();
        availableTags = (await tagService.GetAllTags()).Select(t => t.TagName).ToList();
        FilterTransactions();
        balance = await transactionService.GetBalance();
    }

    private async Task DeleteTransaction(Guid transactionId)
    {
        var success = await transactionService.DeleteTransaction(transactionId);
        if (success)
        {
            allTransactions = await transactionService.GetAllTransactions();
            FilterTransactions();
        }
    }

    private void FilterTransactions()
    {
        filteredTransactions = allTransactions
            .Where(t => (string.IsNullOrEmpty(searchQuery) || t.title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
                        (!startDate.HasValue || t.date >= startDate) &&
                        (!endDate.HasValue || t.date <= endDate) &&
                        (string.IsNullOrEmpty(selectedTag) || (t.tags != null && t.tags.Contains(selectedTag))))
            .OrderByDescending(t => t.date)
            .ToList();
    }

    private void OnSearchClick()
    {
        FilterTransactions();
    }

    private string GetTransactionClass(Transaction transaction)
    {
        return transaction.transactionType switch
        {
            TransactionType.credit => "table-success",
            TransactionType.debit => "table-danger",
            _ => ""
        };
    }
}
